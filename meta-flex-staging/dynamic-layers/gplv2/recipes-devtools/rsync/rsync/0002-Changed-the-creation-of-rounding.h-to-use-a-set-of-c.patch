From 30932a3a7a3843c23577d0fdc6d61311b0454766 Mon Sep 17 00:00:00 2001
From: Wayne Davison <wayned@samba.org>
Date: Tue, 1 Jan 2008 10:27:19 -0800
Subject: [PATCH 2/4] Changed the creation of rounding.h to use a set of
 compile-time checks similar to how configure determines
 the size of variables.

Conflicts:

	.gitignore
	Makefile.in
	configure.in
---
 Makefile.in  |   27 ++++++++++++++-------------
 configure.in |    1 -
 mkrounding.c |   46 +++++++++-------------------------------------
 3 files changed, 23 insertions(+), 51 deletions(-)

diff --git a/Makefile.in b/Makefile.in
index c2f779f..a660a75 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -76,21 +76,22 @@ $(OBJS): $(HEADERS)
 
 flist.o: rounding.h
 
-rounding.h: mkrounding$(EXEEXT)
-	@if test x@cross_compiling@ = xno; then \
-	    ./mkrounding$(EXEEXT) >rounding.h; \
-	else \
-	    echo "Copy the mkrounding$(EXEEXT) command to the target machine and run it like this:"; \
-	    echo "    ./mkrounding$(EXEEXT) >rounding.h"; \
-	    echo "Then copy the resulting rounding.h file to this build machine and rerun \"make\"."; \
+rounding.h: mkrounding.c rsync.h
+	@for r in 0 1 3; do \
+	    if $(CC) $(CFLAGS) $(LDFLAGS) -o mkrounding -DEXTRA_ROUNDING=$$r -I. $(srcdir)/mkrounding.c >/dev/null 2>&1; then \
+		echo "#define EXTRA_ROUNDING $$r" >rounding.h; \
+		if test -f "$$HOME/build_farm/build_test.fns"; then \
+		    echo "EXTRA_ROUNDING is $$r" >&2; \
+		fi; \
+		break; \
+	    fi; \
+	done
+	@rm -f mkrounding
+	@if test -f rounding.h; then : ; else \
+	    echo "Failed to create rounding.h!"; \
 	    exit 1; \
 	fi
 
-mkrounding$(EXEEXT): mkrounding.c rsync.h
-	@sed '1,/^struct file_struct/d; /^}/,$$d' <$(srcdir)/rsync.h >mkrounding.h
-	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ -I. $(srcdir)/mkrounding.c
-	@rm mkrounding.h
-
 tls$(EXEEXT): $(TLS_OBJ)
 	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(TLS_OBJ) $(LIBS)
 
@@ -119,7 +120,7 @@ proto:
 
 clean: cleantests
 	rm -f *~ $(OBJS) $(TLS_OBJ) $(CHECK_PROGS) $(CHECK_OBJS) \
-		mkrounding mkrounding.h rounding.h
+		mkrounding rounding.h
 
 cleantests:
 	rm -rf ./testtmp*
diff --git a/configure.in b/configure.in
index aee2693..61458cf 100644
--- a/configure.in
+++ b/configure.in
@@ -805,7 +805,6 @@ AC_SUBST(OBJ_SAVE)
 AC_SUBST(OBJ_RESTORE)
 AC_SUBST(CC_SHOBJ_FLAG)
 AC_SUBST(BUILD_POPT)
-AC_SUBST(cross_compiling)
 
 
 AC_CONFIG_FILES([Makefile lib/dummy zlib/dummy popt/dummy shconfig])
diff --git a/mkrounding.c b/mkrounding.c
index a5a5229..ec0f277 100644
--- a/mkrounding.c
+++ b/mkrounding.c
@@ -1,47 +1,19 @@
 #include "rsync.h"
 
-struct test1 {
-    union file_extras extras1[1];
-    struct {
-#	include "mkrounding.h"
-    } file;
-};
-
-struct test2 {
-    union file_extras extras2[2];
-    struct {
-#	include "mkrounding.h"
-    } file;
-};
+#define ARRAY_LEN (EXTRA_ROUNDING+1)
+#define SIZEOF(x) ((long int)sizeof (x))
 
-struct test4 {
-    union file_extras extras4[4];
-    struct {
-#	include "mkrounding.h"
-    } file;
+struct test {
+    union file_extras extras[ARRAY_LEN];
+    struct file_struct file;
 };
 
-#define SIZE_TEST(n) (sizeof (struct test ## n) == EXTRA_LEN * n + sizeof (struct file_struct))
+#define ACTUAL_SIZE	SIZEOF(struct test)
+#define EXPECTED_SIZE	(SIZEOF(union file_extras) * ARRAY_LEN + SIZEOF(struct file_struct))
 
  int main(UNUSED(int argc), UNUSED(char *argv[]))
 {
-    int cnt;
-    if (SIZE_TEST(1))
-	cnt = 0;
-    else if (SIZE_TEST(2))
-	cnt = 1;
-    else if (SIZE_TEST(4))
-	cnt = 3;
-    else {
-	fprintf(stderr, "Unable to determine required file_extras rounding!\n");
-	cnt = 3;
-    }
-    if (cnt)
-	fprintf(stderr, "Rounding file_extras in multiples of %d", cnt + 1);
-    else
-	fprintf(stderr, "No rounding needed for file_extras");
-    fprintf(stderr, " (EXTRA_LEN=%d, FILE_STRUCT_LEN=%d)\n",
-	    (int)EXTRA_LEN, (int)FILE_STRUCT_LEN);
-    printf("#define EXTRA_ROUNDING %d\n", cnt);
+    static int test_array[1 - 2 * (ACTUAL_SIZE != EXPECTED_SIZE)];
+    test_array[0] = 0;
     return 0;
 }
-- 
1.7.9.5

